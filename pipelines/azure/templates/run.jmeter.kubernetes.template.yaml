parameters:
  - name: mode
    displayName: 'Which template to use ?'
    type: string
    default: jmeter

jobs:
  - job: JMeter_Tests
    variables:
      - template: default.variables.yaml
        parameters:
          mode: ${{ parameters.mode }}

    displayName: JMeter Tests
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: crux
      displayName: CRUX clone
      condition: and(succeeded(), not(eq(variables.crux_clone, false)))

    - checkout: tests
      displayName: TESTS clone
      condition: and(succeeded(), not(eq(variables.tests_clone, false)))

    - bash: |
        mkdir -p $(reposRoot) && cp -r $(repoName) $(System.DefaultWorkingDirectory)/$(reposRoot)/$(repoName)
        cp -r $(cruxRepoName)/* $(System.DefaultWorkingDirectory)/
      displayName: PREPARE tests
      condition: and(succeeded(), not(eq(variables.prepare_tests, false)))

    - task: AzureCLI@2
      condition: and(succeeded(), eq('${{ parameters.mode }}', 'jmeter_dynamic'))
      displayName: Create cluster/connection
      inputs:
        azureSubscription: $(armServiceConnection)
        scriptType: bash
        scriptPath: $(armModulePath)/create_cluster_and_connection.sh
        arguments: temp$(Build.BuildID) $(rgroup) $(armModulePath)/k8.json $(clusterNodeSize) $(clusterNodeNumber) perf_$(Build.BuildID)_ cname $(devOpsOrg) $(devOpsProject) $(devOpsPatUser) $(devOpsPat) $(k8conn) $(armModulePath)

    - bash: |
        echo "##vso[task.setvariable variable=kubernetesServiceConnection]$(k8conn)"
        echo "Setting active service connection to $(k8conn)"
      condition: and(succeeded(), eq('${{ parameters.mode }}', 'jmeter_dynamic'))
      displayName: 'Overwrite service connection'

    - task: AzureCLI@2
      displayName: Refresh creds
      condition: and(succeeded(), eq('${{ parameters.mode }}', 'jmeter_dynamic'))
      inputs:
        azureSubscription: $(armServiceConnection)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
           echo "Refreshing credentials"
           az aks get-credentials --resource-group $(rgroup) --name $(cname) --overwrite-existing
           echo "Using connection: $(kubernetesServiceConnection)"
           status=1
           sleep_time_s=10
           until kubectl create -n $(namespace) -f kubernetes/config/deployments/jmeter_slaves_deploy_v16.yaml
           do
            printf "\n\tWait for cluster $sleep_time_s seconds"
            sleep $sleep_time_s
           done

           until kubectl create  -n $(namespace) -f kubernetes/config/deployments/jmeter_slaves_svc.yaml
           do
            printf "\n\tWait for cluster $sleep_time_s seconds"
            sleep $sleep_time_s
           done

           until kubectl create  -n $(namespace) -f kubernetes/config/deployments/jmeter_master_configmap.yaml
           do
            printf "\n\tWait for cluster $sleep_time_s seconds"
            sleep $sleep_time_s
           done

           until kubectl create  -n $(namespace) -f kubernetes/config/deployments/jmeter_master_deploy_v16.yaml
           do
            printf "\n\tWait for cluster $sleep_time_s seconds"
            sleep $sleep_time_s
           done
           sleep $(sleep) ||:
           cd kubernetes/bin/ && bash start_test_from_script_params.sh $(cluster_namespace) $(reposRoot)/$(scenario) $(reposRoot)/$(data_file) "$(jmeter_args)"

    - task: Kubernetes@1
      displayName: Login to cluster
      condition: and(succeeded(), eq('${{ parameters.mode }}', 'jmeter_dynamic'))
      inputs:
        command: login
        connectionType: Kubernetes Service Connection
        kubernetesServiceEndpoint: $(kubernetesServiceConnection)

    - bash: |
        echo "Using connection: $(kubernetesServiceConnection)"
        kubectl create  -n $(namespace) -f kubernetes/config/deployments/jmeter_slaves_deploy_v16.yaml
        kubectl create  -n $(namespace) -f kubernetes/config/deployments/jmeter_slaves_svc.yaml
        kubectl create  -n $(namespace) -f kubernetes/config/deployments/jmeter_master_configmap.yaml
        kubectl create  -n $(namespace) -f kubernetes/config/deployments/jmeter_master_deploy_v16.yaml
      condition: and(succeeded(), eq('${{ parameters.mode }}', 'jmeter_dynamic'))
      displayName: Deploy services to cluster

#    - task: KubernetesManifest@0
#      displayName: Scale slaves to $(scale_down_replicas)
#      condition: and(succeeded(), not(eq(variables.scale_slaves_down, false)))
#      inputs:
#        kubernetesServiceConnection: $(kubernetesServiceConnection)
#        action: scale
#        kind: deployment
#        name: $(service)
#        replicas: $(scale_down_replicas)
#        namespace: $(cluster_namespace)
#
#    - task: KubernetesManifest@0
#      displayName: Scale master to $(scale_down_replicas)
#      condition: and(succeeded(), not(eq(variables.scale_master_down, false)))
#      inputs:
#        kubernetesServiceConnection: $(kubernetesServiceConnection)
#        action: scale
#        kind: deployment
#        name: $(service-master)
#        replicas: $(scale_down_replicas)
#        namespace: $(cluster_namespace)
#
#    - task: KubernetesManifest@0
#      displayName: Scale master to $(scale_up_replicas_master)
#      condition: and(succeeded(), not(eq(variables.scale_master_up, false)))
#      inputs:
#        kubernetesServiceConnection: $(kubernetesServiceConnection)
#        action: scale
#        kind: deployment
#        name: $(service-master)
#        replicas: $(scale_up_replicas_master)
#        namespace: $(cluster_namespace)
#
#    - task: KubernetesManifest@0
#      displayName: Scale slaves to $(scale_up_replicas)
#      condition: and(succeeded(), not(eq(variables.scale_slaves_down, false)))
#      inputs:
#        kubernetesServiceConnection: $(kubernetesServiceConnection)
#        action: scale
#        kind: deployment
#        name: $(service)
#        replicas: $(scale_up_replicas)
#        namespace: $(cluster_namespace)
#
#    - task: Kubernetes@1
#      displayName: Login to cluster
#      condition: and(succeeded(), not(eq(variables.login_to_cluster, false)))
#      inputs:
#        command: login
#        connectionType: Kubernetes Service Connection
#        kubernetesServiceEndpoint: $(kubernetesServiceConnection)
#
#    - task: ShellScript@2
#      displayName: JMeter tests
#      condition: and(succeeded(), not(eq(variables.jmeter_tests, false)))
#      inputs:
#        scriptPath: kubernetes/bin/start_test_from_script_params.sh
#        args: $(cluster_namespace) $(reposRoot)/$(scenario) $(reposRoot)/$(data_file) "$(jmeter_args)"

    - task: PublishPipelineArtifact@1
      displayName: Archive JMeter Report
      condition: not(eq(variables.archive_jmeter_report, false))
      inputs:
        path: $(report_dir)
        artifact: JmeterReport

    - task: PublishPipelineArtifact@1
      condition: not(eq(variables.archive_results_file, false))
      displayName: Archive Results file
      inputs:
        path: $(results)
        artifact: results.csv

    - task: PublishPipelineArtifact@1
      condition: not(eq(variables.archive_log, false))
      displayName: Archive Log
      inputs:
        path: $(log)
        artifact: jmeter.log

    - task: ShellScript@2
      displayName: Evaluate as JUNIT tests
      condition: not(eq(variables.evaluate_as_junit_tests, false))
      inputs:
        scriptPath: modules/junit/evaluateTestResultsAsJunit.sh
        args: $(System.DefaultWorkingDirectory)/$(report_dir)/statistics.json $(System.DefaultWorkingDirectory)/modules/junit/results $(System.DefaultWorkingDirectory)/modules/junit/templates $(System.DefaultWorkingDirectory)/$(reposRoot)/$(thresholds_file)

    - task: PublishTestResults@2
      displayName: Publish JUNIT results
      condition: not(eq(variables.publish_junit_results, false))
      inputs:
        testResultsFiles: '**/*_TEST.xml'
        failTaskOnFailedTests: true

    - task: AzureCLI@2
      displayName: Delete cluster/connection
      condition: eq('${{ parameters.mode }}', 'jmeter_dynamic')
      inputs:
        azureSubscription: $(armServiceConnection)
        scriptType: bash
        scriptPath: $(armModulePath)/delete_cluster_and_connection.sh
        arguments: $(armModulePath) $(cname) $(rgroup) $(devOpsOrg) $(devOpsProject) $(devOpsPatUser) $(devOpsPat) $(k8conn)