jobs:
  - job: JMeter_Tests
    variables:
      reposRoot: repos
    displayName: JMeter Tests Regression Pipeline
    pool:
      vmImage: 'ubuntu-latest'
    timeoutInMinutes: 5
    steps:

    - bash: |
        git clone $(repoURL) $(System.DefaultWorkingDirectory)/$(repos)$(repoName)
        ls
      displayName: Clone repo with tests

    - task: KubernetesManifest@0
      displayName: Scale slaves to $(scale_down_replicas)
      inputs:
        kubernetesServiceConnection: $(kubernetesServiceConnection)
        action: scale
        kind: deployment
        name: $(service)
        replicas: $(scale_down_replicas)
        namespace: $(cluster_namespace)

    - task: KubernetesManifest@0
      displayName: Scale master to $(scale_down_replicas)
      inputs:
        kubernetesServiceConnection: $(kubernetesServiceConnection)
        action: scale
        kind: deployment
        name: $(service-master)
        replicas: $(scale_down_replicas)
        namespace: $(cluster_namespace)

    - task: KubernetesManifest@0
      displayName: Scale master to $(scale_up_replicas_master)
      inputs:
        kubernetesServiceConnection: $(kubernetesServiceConnection)
        action: scale
        kind: deployment
        name: $(service-master)
        replicas: $(scale_up_replicas_master)
        namespace: $(cluster_namespace)

    - task: KubernetesManifest@0
      displayName: Scale slaves to $(scale_up_replicas)
      inputs:
        kubernetesServiceConnection: $(kubernetesServiceConnection)
        action: scale
        kind: deployment
        name: $(service)
        replicas: $(scale_up_replicas)
        namespace: $(cluster_namespace)

    - task: Kubernetes@1
      displayName: Login to cluster
      inputs:
        command: login
        connectionType: Kubernetes Service Connection
        kubernetesServiceEndpoint: $(kubernetesServiceConnection)

    - task: ShellScript@2
      displayName: JMeter tests
      inputs:
        scriptPath: kubernetes/bin/start_test_from_script_params.sh
        args: $(cluster_namespace) $(repos)/$(scenario) $(data_file) "$(jmeter_args)"

    - task: PublishPipelineArtifact@1
      displayName: Archive JMeter Report
      inputs:
        path: $(report_dir)
        artifact: JmeterReport

    - task: PublishPipelineArtifact@1
      displayName: Archive Results file
      inputs:
        path: $(results)
        artifact: resuls.csv

    - task: PublishPipelineArtifact@1
      displayName: Archive Log
      inputs:
        path: $(log)
        artifact: jmeter.log

    - task: ShellScript@2
      displayName: Evaluate JMeter results as JUNIT tests
      inputs:
        scriptPath: modules/junit/evaluateTestResultsAsJunit.sh
        args: $(System.DefaultWorkingDirectory)/$(report_dir)/statistics.json $(System.DefaultWorkingDirectory)/modules/junit/results $(System.DefaultWorkingDirectory)/modules/junit/templates

    - task: PublishTestResults@2
      inputs:
        testResultsFiles: '**/*_TEST.xml'
        failTaskOnFailedTests: true