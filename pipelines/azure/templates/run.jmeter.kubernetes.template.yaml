parameters:
  - name: mode
    displayName: 'Which template to use ?'
    type: string
    default: jmeter

jobs:
  - job: JMeter_Tests
    variables:
      - template: default.variables.yaml
        parameters:
          mode: ${{ parameters.mode }}

    displayName: JMeter Tests
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - ${{ if eq(parameters.mode, 'tests') }}:
        - template: mocks/step.crux_clone.yaml

    - ${{ if not(eq(parameters.mode, 'tests')) }}:
        - template: steps/step.crux_clone.yaml

    - ${{ if eq(parameters.mode, 'tests') }}:
        - template: mocks/step.tests_clone.yaml

    - ${{ if not(eq(parameters.mode, 'tests')) }}:
        - template: steps/step.tests_clone.yaml

    - ${{ if eq(parameters.mode, 'tests') }}:
        - template: mocks/step.prepare_tests.yaml

    - ${{ if not(eq(parameters.mode, 'tests')) }}:
        - template: steps/step.prepare_tests.yaml

    - ${{ if eq(parameters.mode, 'tests') }}:
        - template: mocks/step.create_cluster.yaml

    - ${{ if not(eq(parameters.mode, 'tests')) }}:
        - template: steps/step.create_cluster.yaml

    - ${{ if eq(parameters.mode, 'tests') }}:
        - template: mocks/step.configure_cluster.yaml

    - ${{ if not(eq(parameters.mode, 'tests')) }}:
        - template: steps/step.configure_cluster.yaml

    - ${{ if eq(parameters.mode, 'tests') }}:
        - template: mocks/step.deploy_to_cluster.yaml

    - ${{ if not(eq(parameters.mode, 'tests')) }}:
        - template: steps/step.deploy_to_cluster.yaml

    - ${{ if eq(parameters.mode, 'tests') }}:
        - template: mocks/step.jmeter_tests.yaml

    - ${{ if not(eq(parameters.mode, 'tests')) }}:
        - template: steps/step.jmeter_tests.yaml

    - ${{ if eq(parameters.mode, 'tests') }}:
        - template: mocks/step.archive_jmeter_report.yaml

    - ${{ if not(eq(parameters.mode, 'tests')) }}:
        - template: steps/step.archive_jmeter_report.yaml

    - task: PublishPipelineArtifact@1
      condition: not(eq(variables.archive_results_file, false))
      displayName: Archive Results file
      inputs:
        path: $(results)
        artifact: results.csv

    - task: PublishPipelineArtifact@1
      condition: not(eq(variables.archive_log, false))
      displayName: Archive Log
      inputs:
        path: $(log)
        artifact: jmeter.log

    - task: PublishPipelineArtifact@1
      condition: not(eq(variables.archive_errors, false))
      displayName: Archive Errors
      inputs:
        path: $(errors)
        artifact: errors.xml

    - task: ShellScript@2
      displayName: Evaluate as JUNIT tests
      condition: not(eq(variables.evaluate_as_junit_tests, false))
      inputs:
        scriptPath: modules/junit/evaluateTestResultsAsJunit.sh
        args: $(System.DefaultWorkingDirectory)/$(report_dir)/statistics.json $(System.DefaultWorkingDirectory)/modules/junit/results $(System.DefaultWorkingDirectory)/modules/junit/templates $(System.DefaultWorkingDirectory)/$(reposRoot)/$(thresholds_file)

    - task: PublishTestResults@2
      displayName: Publish JUNIT results
      condition: not(eq(variables.publish_junit_results, false))
      inputs:
        testResultsFiles: '**/*_TEST.xml'
        failTaskOnFailedTests: true

    - task: AzureCLI@2
      displayName: Delete cluster
      condition: and(succeeded(), not(eq(variables.delete_cluster, false)))
      inputs:
        azureSubscription: $(armServiceConnection)
        scriptType: bash
        scriptPath: $(armModulePath)/delete_cluster_and_connection.sh
        arguments: $(armModulePath) $(cname) $(rgroup) $(devOpsOrg) $(devOpsProject) $(devOpsPatUser) $(devOpsPat) $(k8conn) skip