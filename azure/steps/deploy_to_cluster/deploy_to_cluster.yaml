parameters:
  timeoutInMinutes: 5
  tool: helm
  helmVersion: v3.4.2
  helmTimeout: 4m
  sleepInterval: 15
  placementRules: best.effort.placement
  storageSize: 3Gi
  slaveImage: gabrielstar/crux-slave:0.0.1
  masterImage: gabrielstar/crux-master:0.0.1
  useLabelledNodesOnly: false

steps:
  #kubectl is left as fall-back if helm becomes messy to maintain
  - ${{ if eq(parameters.tool,'kubectl') }}:
    - task: ShellScript@2
      displayName: Deploy cluster (kubectl)
      timeoutInMinutes: ${{ parameters.timeoutInMinutes }}
      condition: and(succeeded(), not(eq(variables._crux_deploy_to_cluster, false)))
      inputs:
        scriptPath: $(_crux_steps_path)/deploy_to_cluster/deploy_to_cluster.sh
        args: >
          $(System.DefaultWorkingDirectory)
          $(_crux_cluster_deployment_namespace)
          $(_crux_jmeter_master_service)
          $(_crux_jmeter_slaves_service)
          $(_crux_cluster_jmeter_slaves_replicas)
          $(_crux_jmeter_master_deploy_file)
          $(_crux_jmeter_slave_deploy_file)
          ${{ parameters.sleepInterval }}
          $(_crux_aks_agent_pool)

  #helm is the recommended way to manage the cluster
  - ${{ if eq(parameters.tool,'helm') }}:
      - task: HelmInstaller@1
        timeoutInMinutes: ${{ parameters.timeoutInMinutes }}
        displayName: 'Install Helm'
        inputs:
          helmVersionToInstall: ${{ parameters.helmVersion }}

      - ${{ if ne(parameters.mode,'on_aks_created_for_each_test_run') }}:
          - task: HelmDeploy@0
            timeoutInMinutes: ${{ parameters.timeoutInMinutes }}
            displayName: 'Helm upgrade'
            inputs:
              azureSubscriptionEndpoint: $(_crux_arm_service_connection)
              azureResourceGroup: $(_crux_cluster_resource_group)
              kubernetesCluster: $(_crux_cluster_name)
              namespace: $(_crux_cluster_deployment_namespace)
              command: upgrade
              chartType: FilePath
              chartPath: kubernetes/helm/charts/jmeter-cluster
              releaseName: $(_crux_helm_release)
              overrideValues: 'slave.image=${{ parameters.slaveImage }},master.image=${{ parameters.masterImage }},storage.size=${{ parameters.storageSize }},agentpool.name=$(_crux_aks_agent_pool),slave.replicas=$(_crux_cluster_jmeter_slaves_replicas),placementRules=${{ parameters.placementRules }},agentpool.useLabelledNodesOnly=${{ parameters.useLabelledNodesOnly}}'
              force: true
              arguments: '--timeout ${{ parameters.helmTimeout }} --create-namespace'

      - ${{ if eq(parameters.mode,'on_aks_created_for_each_test_run') }}:
          - task: HelmDeploy@0
            timeoutInMinutes: ${{ parameters.timeoutInMinutes }}
            displayName: 'Helm upgrade'
            inputs:
              azureSubscriptionEndpoint: $(_crux_arm_service_connection)
              azureResourceGroup: $(_crux_cluster_resource_group)
              kubernetesCluster: $(_crux_created_cluster_name)
              namespace: $(_crux_cluster_deployment_namespace)
              command: upgrade
              chartType: FilePath
              chartPath: kubernetes/helm/charts/jmeter-cluster
              releaseName: $(_crux_helm_release)
              overrideValues: 'slave.image=${{ parameters.slaveImage }},master.image=${{ parameters.masterImage }},storage.size=${{ parameters.storageSize }},agentpool.name=$(_crux_aks_agent_pool),slaveReplicas=$(_crux_cluster_jmeter_slaves_replicas),placementRules=${{ parameters.placementRules }},agentpool.useLabelledNodesOnly=${{ parameters.useLabelledNodesOnly}}'
              force: true
              arguments: '--timeout ${{ parameters.helmTimeout }} --create-namespace'